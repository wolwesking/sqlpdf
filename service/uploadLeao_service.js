// Import Prisma Client
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();
const dateFormatter = require("../service/dateFormatter_service")

// Function to create a new user in the database
async function uploadDocumentLeao(dataJson) {
    dataJson = JSON.parse(dataJson)

  try {
    // Use the 'create' method to insert a new user
    await prisma.dOC_LEAO.create({
      data: {
        NameOfCompany: dataJson.NameOfCompany,
        Country: dataJson.Country,
        Website: dataJson.Website,
        PublicDeedNumber: dataJson.PublicDeedNumber,
        DateOfPublicDeed: dateFormatter(dataJson.DateOfPublicDeed),
        DateOfIncorporation: dateFormatter(dataJson.DateOfIncorporation),
        RollOrVolume: dataJson.RollOrVolume,
        Document: dataJson.Document,
        File: dataJson.File,
        Adress: dataJson.Adress,
        Corporation: dataJson.Corporation === "on",
        Foundation: dataJson.Foundation === "on",
        Escrow: dataJson.Escrow === "on",
        PostalAddress: dataJson.PostalAddress,
        OfficeTelephone: dataJson.OfficeTelephone,
        Fax: dataJson.Fax,
        OtherAccess: dataJson.OtherAccess,
        CompanyWithFiscalPresenceYes: dataJson.CompanyWithFiscalPresenceYes ==="on",
        CompanyWithFiscalPresenceNo: dataJson.CompanyWithFiscalPresenceNo === "on",
        Discrecional: dataJson.Discrecional === "on",
        NoDiscrecional: dataJson.NoDiscrecional === "on",
        Name1: dataJson.Name1,
        Name2: dataJson.Name2,
        Name3: dataJson.Name3,
        Surname1: dataJson.Surname1,
        Surname2: dataJson.Surname2,
        Surname3: dataJson.Surname3,
        DocumentNo1: dataJson.DocumentNo1,
        DocumentNo2: dataJson.DocumentNo2,
        DocumentNo3: dataJson.DocumentNo3,
        CountryOfTax1: dataJson.CountryOfTax1,
        CountryOfTax2: dataJson.CountryOfTax2,
        CountryOfTax3: dataJson.CountryOfTax3,
        Income1: dataJson.income1,
        ReceiveYourCash1: dataJson.ReceiveYourCash1 === "on",
        SendYourCash1: dataJson.SendYourCash1 === "on",
        ReceiveYourTitles1: dataJson.ReceiveYourTitles1 === "on",
        SubmitYourTitles1: dataJson.SubmitYourTitles1 === "on",
        Income2: dataJson.income2,
        ReceiveYourCash2: dataJson.ReceiveYourCash2 === "on",
        SendYourCash2: dataJson.SendYourCash2 === "on",
        ReceiveYourTitles2: dataJson.ReceiveYourTitles2 === "on",
        SubmitYourTitles2: dataJson.SubmitYourTitles2 === "on",
        NameOfEmployer: dataJson.NameOfEmployer,
        IncomeUsd: dataJson.IncomeUsd,
        SalaryUsd: dataJson.SalaryUsd,
        YearsInTheCompany: dataJson.YearsInTheCompany,
        Professional: dataJson.Professional === "on",
        OwnBusiness: dataJson.OwnBusiness === "on",
        Saving: dataJson.Saving === "on",
        Pension: dataJson.Pension === "on",
        Salary: dataJson.Salary === "on",
        InvestmentDividents: dataJson.InvestmentDividents,
        OtherIncome: dataJson.OtherIncome,
        NameOfTheInstitution1: dataJson.NameOfTheInstitution1,
        NameOfTheInstitution2: dataJson.NameOfTheInstitution2,
        NameOfTheInstitution3: dataJson.NameOfTheInstitution3,
        countryBank1: dataJson.countryBank1,
        countryBank2: dataJson.countryBank2,
        countryBank3: dataJson.countryBank3,
        ContactPerson1: dataJson.ContactPerson1,
        ContactPerson2: dataJson.ContactPerson2,
        ContactPerson3: dataJson.ContactPerson3,
        telephone1: dataJson.telephone1,
        telephone2: dataJson.telephone2,
        telephone3: dataJson.telephone3,
        depositCash: dataJson.depositCash === "on",
        depositSecurities: dataJson.depositSecurities === "on",
        depositBoth: dataJson.depositBoth === "on",
        depositedCash: dataJson.depositedCash,
        depositedSecurities: dataJson.depositedSecurities,
        InstitutionFromWhichTheFundsCome1:
          dataJson.InstitutionFromWhichTheFundsCome1,
        cash1: dataJson.cash1 === "on",
        cash2: dataJson.cash2 === "on",
        RelationshipTimeWithTheInstitution1:
          dataJson.RelationshipTimeWithTheInstitution1,
        InstitutionFromWhichTheFundsCome2:
          dataJson.InstitutionFromWhichTheFundsCome2,
        cash3: dataJson.cash3 === "on",
        cash4: dataJson.cash4 === "on",
        RelationshipTimeWithTheInstitution2:
          dataJson.RelationshipTimeWithTheInstitution2,
        PoliticallyExposedCheckYes: dataJson.PoliticallyExposedCheckYes === "on",
        PoliticallyExposedCheckNo: dataJson.PoliticallyExposedCheckNo === "on",
        CloseRelativeCheckYes: dataJson.CloseRelativeCheckYes === "on",
        CloseRelativeCheckNo: dataJson.CloseRelativeCheckNo === "on",
        ConsideredPEPCheckYes: dataJson.ConsideredPEPCheckYes === "on",
        ConsideredPEPCheckNo: dataJson.ConsideredPEPCheckNo === "on",
        Titular: dataJson.Titular === "on",
        CoTitle: dataJson.coTitle === "on",
        Signatory: dataJson.Signatory === "on",
        Attorney: dataJson.Attorney === "on",
        RecipientShareholder: dataJson.RecipientShareholder === "on",
        Mail: dataJson.Mail === "on",
        DocumentsWritings: dataJson.DocumentsWritings === "on",
        ViaTelephone: dataJson.ViaTelephone === "on",
        TextPlatforms: dataJson.TextPlatforms === "on",
        DirectlyByTheClientInTheSystem: dataJson.DirectlyByTheClientInTheSystem === "on",
        AppPrevious: dataJson.AppPrevious === "on",
        SendYes: dataJson.SendYes === "on",
        SendNo: dataJson.SendNo === "on",
        Mail2: dataJson.Mail2 === "on",
        DocumentsWritings2: dataJson.DocumentsWritings2 === "on",
        ViaTelephone2: dataJson.ViaTelephone2 === "on",
        TextPlatforms2: dataJson.TextPlatforms2 === "on",
        AccountStatementYes: dataJson.AccountStatementYes === "on",
        AccountStatementNo: dataJson.AccountStatementNo === "on",
        Correcto: dataJson.Correcto === "on",
        ApartadoPostal: dataJson.ApartadoPostal === "on",
        MonthlyRecieve: dataJson.MonthlyRecieve === "on",
        QuarterlyRecieve: dataJson.QuarterlyRecieve === "on",
        SemiannualRecieve: dataJson.SemiannualRecieve === "on",
        YearlyRecieve: dataJson.YearlyRecieve=== "on",
        OtherEmailDeclaration: dataJson.otherEmailDecleration,
        SignitureTypeJoint: dataJson.SignitureTypeJoint === "on",
        SignitureTypeIndistinct: dataJson.SignitureTypeIndistinct === "on",
        FullNameInPrint1: dataJson.FullNameInPrint1,
        FullNameInPrint2: dataJson.FullNameInPrint2,
        DomumentID1: dataJson.DomumentID1,
        DomumentID2: dataJson.DomumentID2,
        DateOfSign1: dateFormatter(dataJson.DateOfSign1),
        DateOfSign2: dateFormatter(dataJson.DateOfSign2),
        RunnerName1: dataJson.RunnerName1,
        RunnerName2: dataJson.RunnerName2,
        RunnerName3: dataJson.RunnerName3,
        DateRunner1: dateFormatter(dataJson.DateRunner1),
        DateRunner2: dateFormatter(dataJson.DateRunner2),
        DateRunner3: dateFormatter(dataJson.DateRunner3),
      },
    });

  } catch (error) {
    console.error("Error creating user:", error);
  } finally {
    await prisma.$disconnect(); // Disconnect from the database when done
  }
}

module.exports = {
    uploadDocumentLeao
  };